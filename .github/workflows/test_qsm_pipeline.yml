name: qsm pipeline test
on:
  workflow_dispatch:
  repository_dispatch:
  push:
    branches: [ master ]
    paths:
      - README.md
      - run_0_dicomSort.py
      - run_1_dicomConvert.py
      - run_2_qsm.py
      - interfaces/nipype_interface_addtojson.py
      - interfaces/nipype_interface_axialsampling.py
      - interfaces/nipype_interface_bet2.py
      - interfaces/nipype_interface_erode.py
      - interfaces/nipype_interface_json.py
      - interfaces/nipype_interface_laplacian_unwrapping.py
      - interfaces/nipype_interface_makehomogeneous.py
      - interfaces/nipype_interface_masking.py
      - interfaces/nipype_interface_nextqsm.py
      - interfaces/nipype_interface_nonzeroaverage.py
      - interfaces/nipype_interface_phaseweights.py
      - interfaces/nipype_interface_processphase.py
      - interfaces/nipype_interface_qsmjl.py
      - interfaces/nipype_interface_romeo.py
      - interfaces/nipype_interface_tgv_qsm.py
      - interfaces/nipype_interface_twopass.py
      - scripts/logger.py
      - scripts/makehomogeneous.jl
      - scripts/mrt_laplacian_unwrapping.jl
      - scripts/qsmjl_full.jl
      - scripts/qsmjl_laplacian_unwrapping.jl
      - scripts/qsmjl_pdf.jl
      - scripts/qsmjl_rts.jl
      - scripts/qsmjl_tv.jl
      - scripts/qsmjl.vsharp.jl
      - scripts/romeo_unwrapping.jl
      - scripts/romeo_voxelquality.jl
      - scripts/qsmxt_functions.py
      - scripts/qsmxt_version.py
      - .github/workflows/test_qsm_pipeline.yml
      - tests/test_qsm_pipeline.sh
      - tests/test_qsm_pipeline.py
      - qsm_pipelines.json
      - workflows/qsm.py
      - workflows/masking.py
  pull_request:
    branches: [ master ]
    paths:
      - README.md
      - run_0_dicomSort.py
      - run_1_dicomConvert.py
      - run_2_qsm.py
      - interfaces/nipype_interface_addtojson.py
      - interfaces/nipype_interface_axialsampling.py
      - interfaces/nipype_interface_bet2.py
      - interfaces/nipype_interface_erode.py
      - interfaces/nipype_interface_json.py
      - interfaces/nipype_interface_laplacian_unwrapping.py
      - interfaces/nipype_interface_makehomogeneous.py
      - interfaces/nipype_interface_masking.py
      - interfaces/nipype_interface_nextqsm.py
      - interfaces/nipype_interface_nonzeroaverage.py
      - interfaces/nipype_interface_phaseweights.py
      - interfaces/nipype_interface_processphase.py
      - interfaces/nipype_interface_qsmjl.py
      - interfaces/nipype_interface_romeo.py
      - interfaces/nipype_interface_tgv_qsm.py
      - interfaces/nipype_interface_twopass.py
      - scripts/logger.py
      - scripts/makehomogeneous.jl
      - scripts/mrt_laplacian_unwrapping.jl
      - scripts/qsmjl_full.jl
      - scripts/qsmjl_laplacian_unwrapping.jl
      - scripts/qsmjl_pdf.jl
      - scripts/qsmjl_rts.jl
      - scripts/qsmjl_tv.jl
      - scripts/qsmjl.vsharp.jl
      - scripts/romeo_unwrapping.jl
      - scripts/romeo_voxelquality.jl
      - scripts/qsmxt_functions.py
      - scripts/qsmxt_version.py
      - .github/workflows/test_qsm_pipeline.yml
      - tests/test_qsm_pipeline.sh
      - tests/test_qsm_pipeline.py
      - qsm_pipelines.json
      - workflows/qsm.py
      - workflows/masking.py
jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      network-name: ${{ steps.create-network.outputs.network }}
      container-name: ${{ steps.extract-container-name.outputs.container }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      
      - name: Extract container name from README.md
        id: extract-container-name
        run: |
          container_name=$(cat README.md | grep -m 1 vnmd/qsmxt | cut -d ' ' -f 6)
          echo "::set-output name=container::$container_name"

      - name: Create Docker network
        id: create-network
        run: |
          network_name="custom_network_$(date +%s)"
          docker network create --driver bridge "$network_name"
          echo "::set-output name=network::$network_name"

      - name: Start Docker container
        run: |
          docker run -d --rm \
            --name my-shared-container \
            --network ${{ steps.create-network.outputs.network }} \
            --network-alias shared-container \
            ${{ steps.extract-container-name.outputs.container }}
  job_1:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      matrix:
        argument: ["gre", "epi", "bet", "fast", "body", "nextqsm"]
    steps:
      - name: Run command using shared container
        env:
          BRANCH: ${{ github.ref }}
          PYTHONPATH: /tmp/QSMxT
          PATH: /tmp/QSMxT:/tmp/QSMxT/scripts:${PATH}
          DOWNLOAD_URL: ${{ secrets.DOWNLOAD_URL }}
          DATA_PASS: ${{ secrets.DATA_PASS }}
          UPLOAD_URL: ${{ secrets.UPLOAD_URL }}
        run: |
          docker run \
            --network ${{ needs.setup.outputs.network-name }} \
            --env BRANCH="${BRANCH}" \
            --env PYTHONPATH="${PYTHONPATH}" \
            --env PATH="${PATH}" \
            --env DOWNLOAD_URL="${DOWNLOAD_URL}" \
            --env DATA_PASS="${DATA_PASS}" \
            --env UPLOAD_URL="${UPLOAD_URL}" \
            -v /tmp:/tmp shared-container \
            pytest /tmp/QSMxT/tests/test_qsm_pipeline.py -s -k "premade and ${{ matrix.argument }}"

