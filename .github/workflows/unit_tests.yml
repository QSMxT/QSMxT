name: Unit Tests
on:
  push:
    branches: [ main, develop ]
    paths:
      - 'qsmxt/**/*.py'
      - 'qsmxt/tests/unit/**'
      - 'qsmxt/tests/fixtures/**'
      - 'qsmxt/tests/conftest.py'
      - 'setup.py'
      - '.github/workflows/unit_tests.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'qsmxt/**/*.py'
      - 'qsmxt/tests/unit/**'
      - 'qsmxt/tests/fixtures/**'
      - 'qsmxt/tests/conftest.py'
      - 'setup.py'
      - '.github/workflows/unit_tests.yml'
  workflow_dispatch:

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8']
      fail-fast: false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('setup.py') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install pytest pytest-mock pytest-cov pytest-xdist

      - name: Run unit tests
        run: |
          pytest qsmxt/tests/unit/ \
            -v \
            --cov=qsmxt \
            --cov-report=xml \
            --cov-report=term \
            -x

      - name: Upload coverage to Codecov
        if: matrix.python-version == '3.8'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.8'

      - name: Install linting dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort

      - name: Check code formatting with black
        run: |
          black --check --diff qsmxt/

      - name: Check import sorting with isort
        run: |
          isort --check-only --diff qsmxt/

      - name: Lint with flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 qsmxt/ --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings. Line length is set to 88 (black's default)
          flake8 qsmxt/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

  test-summary:
    runs-on: ubuntu-latest
    needs: [unit-tests, lint]
    if: always()
    steps:
      - name: Test Summary
        run: |
          echo "## Unit Test Results" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests | ${{ needs.unit-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Linting | ${{ needs.lint.result }} |" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.unit-tests.result }}" == "success" && "${{ needs.lint.result }}" == "success" ]]; then
            echo "✅ All checks passed!" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Some checks failed. Please review the logs." >> $GITHUB_STEP_SUMMARY
          fi