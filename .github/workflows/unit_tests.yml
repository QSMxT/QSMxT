name: Tests
on:
  push:
    branches: [ main, develop ]
    paths:
      - 'qsmxt/**/*.py'
      - 'qsmxt/tests/**'
      - 'setup.py'
      - '.github/workflows/unit_tests.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'qsmxt/**/*.py'
      - 'qsmxt/tests/**'
      - 'setup.py'
      - '.github/workflows/unit_tests.yml'
  workflow_dispatch:

jobs:
  tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8']
      fail-fast: false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('setup.py') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install pytest pytest-mock pytest-cov pytest-xdist

      - name: Run QSMxT tests
        id: qsmxt_tests
        run: |
          pytest qsmxt/tests/qsmxt/ \
            -v \
            --cov=qsmxt \
            --cov-report=xml \
            --cov-report=term \
            --tb=short \
            --junit-xml=qsmxt-test-results.xml
        continue-on-error: true

      - name: Run DICOM Convert tests
        id: dicom_tests
        run: |
          pytest qsmxt/tests/dicom_convert/ \
            -v \
            --cov=qsmxt.cli.dicom_convert \
            --cov-append \
            --cov-report=xml \
            --cov-report=term \
            --tb=short \
            --junit-xml=dicom-convert-test-results.xml
        continue-on-error: true

      - name: Parse test results
        if: always()
        run: |
          # Set default values
          echo "QSMXT_STATUS=❌ Failed" >> $GITHUB_ENV
          echo "DICOM_STATUS=❌ Failed" >> $GITHUB_ENV
          echo "QSMXT_SUMMARY=No results" >> $GITHUB_ENV
          echo "DICOM_SUMMARY=No results" >> $GITHUB_ENV
          
          # Parse QSMxT results
          if [ -f qsmxt-test-results.xml ]; then
            QSMXT_COUNT=$(grep -o 'tests="[0-9]*"' qsmxt-test-results.xml | grep -o '[0-9]*' | head -1 || echo "0")
            QSMXT_FAILURES=$(grep -o 'failures="[0-9]*"' qsmxt-test-results.xml | grep -o '[0-9]*' | head -1 || echo "0")
            QSMXT_ERRORS=$(grep -o 'errors="[0-9]*"' qsmxt-test-results.xml | grep -o '[0-9]*' | head -1 || echo "0")
            
            if [ "$QSMXT_FAILURES" = "0" ] && [ "$QSMXT_ERRORS" = "0" ]; then
              echo "QSMXT_STATUS=✅ Passed" >> $GITHUB_ENV
            else
              echo "QSMXT_STATUS=❌ Failed" >> $GITHUB_ENV
            fi
            echo "QSMXT_SUMMARY=${QSMXT_COUNT} tests, ${QSMXT_FAILURES} failures, ${QSMXT_ERRORS} errors" >> $GITHUB_ENV
          fi
          
          # Parse DICOM Convert results
          if [ -f dicom-convert-test-results.xml ]; then
            DICOM_COUNT=$(grep -o 'tests="[0-9]*"' dicom-convert-test-results.xml | grep -o '[0-9]*' | head -1 || echo "0")
            DICOM_FAILURES=$(grep -o 'failures="[0-9]*"' dicom-convert-test-results.xml | grep -o '[0-9]*' | head -1 || echo "0")
            DICOM_ERRORS=$(grep -o 'errors="[0-9]*"' dicom-convert-test-results.xml | grep -o '[0-9]*' | head -1 || echo "0")
            
            if [ "$DICOM_FAILURES" = "0" ] && [ "$DICOM_ERRORS" = "0" ]; then
              echo "DICOM_STATUS=✅ Passed" >> $GITHUB_ENV
            else
              echo "DICOM_STATUS=❌ Failed" >> $GITHUB_ENV
            fi
            echo "DICOM_SUMMARY=${DICOM_COUNT} tests, ${DICOM_FAILURES} failures, ${DICOM_ERRORS} errors" >> $GITHUB_ENV
          fi

      - name: Upload coverage to Codecov
        if: matrix.python-version == '3.8'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            qsmxt-test-results.xml
            dicom-convert-test-results.xml
          retention-days: 30

  test-summary:
    runs-on: ubuntu-latest
    needs: [tests]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Download test results
        uses: actions/download-artifact@v4
        with:
          name: test-results
          path: .
        continue-on-error: true
        
      - name: Test Summary
        run: |
          echo "## Unit Test Results" >> $GITHUB_STEP_SUMMARY
          echo "| Test Suite | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|--------|---------|" >> $GITHUB_STEP_SUMMARY
          
          # Parse QSMxT results
          QSMXT_STATUS="❌ Unknown"
          QSMXT_SUMMARY="No results"
          if [ -f qsmxt-test-results.xml ]; then
            QSMXT_COUNT=$(grep -o 'tests="[0-9]*"' qsmxt-test-results.xml | grep -o '[0-9]*' | head -1 || echo "0")
            QSMXT_FAILURES=$(grep -o 'failures="[0-9]*"' qsmxt-test-results.xml | grep -o '[0-9]*' | head -1 || echo "0")
            QSMXT_ERRORS=$(grep -o 'errors="[0-9]*"' qsmxt-test-results.xml | grep -o '[0-9]*' | head -1 || echo "0")
            QSMXT_SUMMARY="${QSMXT_COUNT} tests, ${QSMXT_FAILURES} failures, ${QSMXT_ERRORS} errors"
            if [ "$QSMXT_FAILURES" = "0" ] && [ "$QSMXT_ERRORS" = "0" ]; then
              QSMXT_STATUS="✅ Passed"
            else
              QSMXT_STATUS="❌ Failed"
            fi
          fi
          
          # Parse DICOM Convert results
          DICOM_STATUS="❌ Unknown"
          DICOM_SUMMARY="No results"
          if [ -f dicom-convert-test-results.xml ]; then
            DICOM_COUNT=$(grep -o 'tests="[0-9]*"' dicom-convert-test-results.xml | grep -o '[0-9]*' | head -1 || echo "0")
            DICOM_FAILURES=$(grep -o 'failures="[0-9]*"' dicom-convert-test-results.xml | grep -o '[0-9]*' | head -1 || echo "0")
            DICOM_ERRORS=$(grep -o 'errors="[0-9]*"' dicom-convert-test-results.xml | grep -o '[0-9]*' | head -1 || echo "0")
            DICOM_SUMMARY="${DICOM_COUNT} tests, ${DICOM_FAILURES} failures, ${DICOM_ERRORS} errors"
            if [ "$DICOM_FAILURES" = "0" ] && [ "$DICOM_ERRORS" = "0" ]; then
              DICOM_STATUS="✅ Passed"
            else
              DICOM_STATUS="❌ Failed"
            fi
          fi
          
          echo "| QSMxT | $QSMXT_STATUS | $QSMXT_SUMMARY |" >> $GITHUB_STEP_SUMMARY
          echo "| DICOM Convert | $DICOM_STATUS | $DICOM_SUMMARY |" >> $GITHUB_STEP_SUMMARY
          echo "| Overall | ${{ needs.tests.result == 'success' && '✅ Passed' || '❌ Failed' }} | - |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.tests.result }}" == "success" ]]; then
            echo "✅ All test suites passed!" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Some test suites failed. Please review the logs above." >> $GITHUB_STEP_SUMMARY
          fi