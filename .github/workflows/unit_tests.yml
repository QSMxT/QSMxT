name: Tests
on:
  push:
    branches: [ main, develop ]
    paths:
      - 'qsmxt/**/*.py'
      - 'qsmxt/tests/**'
      - 'setup.py'
      - '.github/workflows/unit_tests.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'qsmxt/**/*.py'
      - 'qsmxt/tests/**'
      - 'setup.py'
      - '.github/workflows/unit_tests.yml'
  workflow_dispatch:

jobs:
  qsmxt-tests:
    name: QSMxT Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8']
      fail-fast: false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('setup.py') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install pytest pytest-mock pytest-cov pytest-xdist

      - name: Run QSMxT tests
        run: |
          pytest qsmxt/tests/qsmxt/ \
            -v \
            --cov=qsmxt \
            --cov-report=xml \
            --cov-report=term \
            --tb=short \
            --junit-xml=qsmxt-test-results.xml

      - name: Upload coverage to Codecov
        if: matrix.python-version == '3.8'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: qsmxt-tests
          name: qsmxt-coverage

      - name: Upload QSMxT test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: qsmxt-test-results
          path: qsmxt-test-results.xml
          retention-days: 30

  dicom-convert-tests:
    name: DICOM Convert Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8']
      fail-fast: false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('setup.py') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install pytest pytest-mock pytest-cov pytest-xdist

      - name: Run DICOM Convert tests
        run: |
          pytest qsmxt/tests/dicom_convert/ \
            -v \
            --cov=qsmxt.cli.dicom_convert \
            --cov-report=xml \
            --cov-report=term \
            --tb=short \
            --junit-xml=dicom-convert-test-results.xml

      - name: Upload coverage to Codecov
        if: matrix.python-version == '3.8'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: dicom-convert-tests
          name: dicom-convert-coverage

      - name: Upload DICOM Convert test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dicom-convert-test-results
          path: dicom-convert-test-results.xml
          retention-days: 30

  lint:
    name: Code Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.8'

      - name: Install linting dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort

      - name: Check code formatting with black
        run: |
          black --check --diff qsmxt/

      - name: Check import sorting with isort
        run: |
          isort --check-only --diff qsmxt/

      - name: Lint with flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 qsmxt/ --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings. Line length is set to 88 (black's default)
          flake8 qsmxt/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [qsmxt-tests, dicom-convert-tests, lint]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Download QSMxT test results
        uses: actions/download-artifact@v4
        with:
          name: qsmxt-test-results
          path: .
        continue-on-error: true

      - name: Download DICOM Convert test results
        uses: actions/download-artifact@v4
        with:
          name: dicom-convert-test-results
          path: .
        continue-on-error: true
        
      - name: Test Summary
        run: |
          echo "## Unit Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Overall job status table
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| QSMxT Tests | ${{ needs.qsmxt-tests.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| DICOM Convert Tests | ${{ needs.dicom-convert-tests.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Code Linting | ${{ needs.lint.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Function to parse and display individual test results
          parse_test_results() {
            local file=$1
            local suite_name=$2
            
            if [ ! -f "$file" ]; then
              echo "### $suite_name - ‚ùå No Results" >> $GITHUB_STEP_SUMMARY
              echo "Test file not found: $file" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              return
            fi
            
            # Extract overall stats
            local total=$(grep -o 'tests="[0-9]*"' "$file" | grep -o '[0-9]*' | head -1 || echo "0")
            local failures=$(grep -o 'failures="[0-9]*"' "$file" | grep -o '[0-9]*' | head -1 || echo "0")
            local errors=$(grep -o 'errors="[0-9]*"' "$file" | grep -o '[0-9]*' | head -1 || echo "0")
            local passed=$((total - failures - errors))
            
            if [ "$failures" = "0" ] && [ "$errors" = "0" ]; then
              echo "### $suite_name - ‚úÖ All Tests Passed ($total/$total)" >> $GITHUB_STEP_SUMMARY
            else
              echo "### $suite_name - ‚ùå Some Tests Failed ($passed/$total passed)" >> $GITHUB_STEP_SUMMARY
            fi
            
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Test | Status | Time |" >> $GITHUB_STEP_SUMMARY
            echo "|------|--------|------|" >> $GITHUB_STEP_SUMMARY
            
            # Parse individual test cases
            # Extract testcase elements with name, status, and time
            grep '<testcase' "$file" | while IFS= read -r line; do
              # Extract test name
              test_name=$(echo "$line" | sed -n 's/.*name="\([^"]*\)".*/\1/p')
              # Extract time
              test_time=$(echo "$line" | sed -n 's/.*time="\([^"]*\)".*/\1/p')
              
              # Check if test failed or had error
              if echo "$line" | grep -q 'failure\|error'; then
                echo "| \`$test_name\` | ‚ùå Failed | ${test_time}s |" >> $GITHUB_STEP_SUMMARY
              elif echo "$line" | grep -q 'skipped'; then
                echo "| \`$test_name\` | ‚è≠Ô∏è Skipped | ${test_time}s |" >> $GITHUB_STEP_SUMMARY
              else
                echo "| \`$test_name\` | ‚úÖ Passed | ${test_time}s |" >> $GITHUB_STEP_SUMMARY
              fi
            done
            
            # Show failure details if any
            if [ "$failures" != "0" ] || [ "$errors" != "0" ]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "<details>" >> $GITHUB_STEP_SUMMARY
              echo "<summary>üîç Failure Details</summary>" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
              
              # Extract failure messages
              grep -A 10 '<failure\|<error' "$file" | sed 's/<[^>]*>//g' | head -50 >> $GITHUB_STEP_SUMMARY
              
              echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
              echo "</details>" >> $GITHUB_STEP_SUMMARY
            fi
            
            echo "" >> $GITHUB_STEP_SUMMARY
          }
          
          # Parse results for each test suite
          parse_test_results "qsmxt-test-results.xml" "QSMxT Tests"
          parse_test_results "dicom-convert-test-results.xml" "DICOM Convert Tests"
          
          # Overall summary
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check overall status
          QSMXT_STATUS="${{ needs.qsmxt-tests.result }}"
          DICOM_STATUS="${{ needs.dicom-convert-tests.result }}"
          LINT_STATUS="${{ needs.lint.result }}"
          
          if [[ "$QSMXT_STATUS" == "success" && "$DICOM_STATUS" == "success" && "$LINT_STATUS" == "success" ]]; then
            echo "## ‚úÖ All Jobs Passed!" >> $GITHUB_STEP_SUMMARY
            echo "All test suites and linting checks completed successfully." >> $GITHUB_STEP_SUMMARY
          else
            echo "## ‚ùå Some Jobs Failed" >> $GITHUB_STEP_SUMMARY
            echo "Please review the individual job results above and check the workflow logs for more details." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Failed Jobs:**" >> $GITHUB_STEP_SUMMARY
            if [[ "$QSMXT_STATUS" != "success" ]]; then
              echo "- QSMxT Tests: $QSMXT_STATUS" >> $GITHUB_STEP_SUMMARY
            fi
            if [[ "$DICOM_STATUS" != "success" ]]; then
              echo "- DICOM Convert Tests: $DICOM_STATUS" >> $GITHUB_STEP_SUMMARY
            fi
            if [[ "$LINT_STATUS" != "success" ]]; then
              echo "- Code Linting: $LINT_STATUS" >> $GITHUB_STEP_SUMMARY
            fi
          fi